h1. Resumable File Uploads for HTML5

These are the skeleton files for providing resumable file uploads in Rails.


h2. How it works

# You drag and drop a large file for uploading (or use file input, yawn)
# Using JavaScript FileAPI we send a simple fingerprint of the file to the server
#* filename, file size, modified date - the user is also taken into account, determined by the current session data
# The server looks for an existing matching file
#* If not found it creates a new one
#* Then it returns the file_id and the part of the file we are up to
# The JavaScript looks at the response then sends the next part of the file
# The server appends the part to the file then requests the next part
# and so on...

I've defined the part size to be a constant 1mb (1024 x 1024). Feel free to adjust this as you see fit.


h2. Using it with Rails 3.1

I've made the following assumptions
* You are validating users before letting them upload
** There are callbacks to obtain this information
* Once the upload has occured you will be performing post processing of some sort
** Creating a DB entry to manage the location of the file, as the most basic example

h3. Basic Usage

# Copy folder into the vendor directory (not the plugins folder)
# Create an entry in your gem file for it: gem 'resolute', :path => '/vendor/resolute'
# Create an initializer for the configuration: config/initializers/uploads.rb (for example)
#* Enter config (outlined in the next section)
# Update your routes
# Run migrations
#* First need to copy over the migrations: rake railties:install:migrations
#* Then: rake db:migrate
# In the head section of your document include: <%= javascript_include_tag *Resolute.js %>
#* This provides client side internationalisation based on the current sessions locale
#* Alternatively Include *aca-i18n.js*, *resumables-en.js* and *resumables.js* file in your app/assets/javascripts/application.js file
# Configure the client side jQuery as you wish (outlined below)

h3. Engine Config

In your initializer:

<pre>
<code>

	Resolute.current_user do
		#
		# This is run in the context of the controller
		#	Return a unique identifier that can be stringified
		#
		session[:user]
	end
	
	Resolute.upload_completed  do  |result|
		#
		#	Result is a hash with the following fields
		#		:user	(user identifier defined by current_user above)
		#		:filename (original, unmodified, filename as sent from client side)
		#		:filepath (relational path to the file)
		#		:params (any custom parameters from the client side)
		#		:resumable - the resumable db entry. Will be automatically destroyed on success, not on failure.
		#						This provides you the opportunity to destroy it if you like. Will be nil if it is a regular upload.
		#
		me = Model.new(result)
		me.save
		if me.new_record?
			#
			# If the uploaded file is not required delete it and destroy resumable here too
			#
			return me.errors	# Provide the client side with some information
		else
			FileUtils.mv(result[:filepath], me.storage_location)	# etc.. This should be in the model in after_create
			return true
		end
	end
	
	#
	# These are the defaults for the following two options:
	#
	Resolute.upload_folder = 'tmp/uploading'	# Folder is created if it doesn't exist
	
	#
	# Provides a way to prevent an upload as early as possible
	#	Return false or an array of errors if the file type is not supported (determined from filename)
	#
	Resolute.check_supported = Proc.new {|file_info| return true}	# Can also be defined as a block like above
		#
		# File_info hash contains the following - :user, :filename, :params (any custom parameters from the client side)
		#


</code>
</pre>


The engine also needs to have a base path defined in routes: config/routes.rb
Create an entry where ever you want, the client side defaults to /uploads

<pre>
<code>
	mount Resolute::Engine => "/uploads"
</code>
</pre>


h3. Client side JavaScript

Provides the hooks into your web application to provide upload hotspots (think gmail uploads) and feedback

<pre>
<code>
	
	$('#file_input, #drop_spot').resumable({
		//
		// Event callbacks
		//
		onStart: function(event, total) { return true; },
		onUploadStarted: function(event, name, number, total) { return true; },
		onUploadProgress: function(event, progress, name, number, total) { },
		onUploadFinish: function(event, response, name, number, total) { },
		onUploadError: function(event, name, error, messages) { },
		onFinish: function(event, total) { },
		
		startDragHover: function(){},	// Hovering over hotspot
		endDragHover: function(){},		// No longer hovering over the hotspot
		
		//
		// Informational callbacks
		//
		setName: function(text) { },
		setStatus: function(text) { },
		setProgress: function(value) { },
		
		//
		// Configuration options
		//
		baseURL: '/uploads',	// Default
		//additionalParameters: JS Object or function(file) {return {params: 'data'}},
		
		autostart: true,			// On change if using input box
		autoclear: true,			// Clears the file upload input box once complete
		retry_part_errors: false,	// Applies only to resumable uploads
		retry_limit: 3,				// Number of part retries before giving up
		halt_on_error: false		// Stop uploading further files?
	});
	
	//
	// A more realistic setup with jquery ui
	//
	if ($.support.filereader && $.support.formdata) {	// Check HTML5 uploads are workable
		var diag = $('<div />').html('<div></div><p></p>');
		var progress = diag.children('div').progressbar({
			value: 0
		});
		var status = diag.children('p');
		var failures = 0;
		
		$('#drop_spot').resumable({
			onStart: function (event, total) {
				// Make sure we warn the user before exiting the page while uploading
				window.onbeforeunload = function() {return "You are attempting to leave this page while an upload is taking place. Are you sure you want to leave?";};
				
				failures = 0;
				progress.progressbar("value", 0);

				var thebuttons = {};
				thebuttons["Cancel"] = function () {
					$('#drop_spot').trigger('cancelAll');
				};
				diag.dialog({
					modal: true,
					buttons: thebuttons,
					close: function (event, ui) {
						if (window.onbeforeunload != null)
							draghotspot.trigger('cancelAll');	// This will call onFinish
					}
				});
				return true;
			},
			setName: function (text) {
				diag.dialog("option", "title", text);
			},
			setStatus: function (text) {
				status.text(text);
			},
			setProgress: function (val) {
				progress.progressbar("value", Math.ceil(val * 100));
			},
			onUploadError: function(event, name, error, messages) {
				failures = failures + 1;
				var inner = '<p>There were some issues uploading ' + name + ':</p><ul>';
				
				//
				// Display active record validation errors if avaliable
				//
				if(messages.error.constructor == Array) {
					$.each(messages.error, function (key, val) {
						inner = inner + '<li>' + key + '<ul>';
						$.each(val, function (index, inval) {
							inner = inner + '<li>' + inval + '</li>';
						});
						inner = inner + '</ul></li>';
					});
				} else if (messages.error != null) {
					inner = inner + '<li>' + messages.error + '</li>';
				} else {
					inner = inner + '<li>' + error + '</li>';
				}
				inner = inner + '</ul>';
				$.noticeAdd({ text: inner, stay: true });
			},
			onFinish: function (event, total) {
				window.onbeforeunload = null; 		// No more need for user warning
				diag.dialog("close").dialog("destroy");
				//
				// Update view here then inform users
				//
				$.noticeAdd({ text: (total - failures) + " items successfully uploaded", stayTime: 6000 });
			},
			startDragHover: function(){
				$('#drop_spot > #highlighter').stop(true).animate({opacity:1});
			},
			endDragHover: function(){
				$('#drop_spot > #highlighter').stop(true).animate({opacity:0.2});
			}
		});
	}

</code>
</pre>



h2. Credits

The client side code was refactored and inspired by: http://code.google.com/p/jquery-html5-upload/

